{"version":3,"sources":["actionCreators.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["postLoginAPI","body","fetch","credentials","method","headers","Headers","then","response","text","data","error","token","getProductsAPI","json","App","props","onShowLoginForm","setState","state","showLoginForm","username","password","onSubmitLogin","adminLogin","onLogout","showNewProductForm","adminLogout","onChangeUsername","e","target","value","onChangePassword","onShowNewProduct","renderNewProduct","className","Card","Header","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","rows","Check","label","Button","variant","onClick","style","margin","renderLogin","ListGroup","padding","onChange","id","renderProductsList","Table","responsive","productsList","map","product","index","name","renderAdminButton","AuthButton","NewProductButton","renderLoading","this","getProductsList","prevProps","prevState","scroll","loading","Component","mapDispatchToProps","dispatch","a","JSON","stringify","res","getState","list","connect","ownProps","products","Boolean","window","location","hostname","match","initialState","reducers","action","loadin","store","createStore","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0YAgCMA,EAAe,SAACC,GACpB,OAAOC,MAAM,qFAA2F,CACtGC,YAAa,cACbC,OAAQ,OACRH,OACAI,QAAS,IAAIC,QAAQ,CAAE,eAAgB,uBACtCC,MAAK,SAAAC,GACN,OAAOA,EAASC,OAAOF,MAAK,SAACG,GAC3B,MAAa,gCAATA,EACK,CAAEC,MAAOD,GAEX,CAAEE,MAAOF,UA0BhBG,EAAiB,WACrB,OAAOX,MAAM,wFAA8F,CACzGC,YAAa,cACbC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,uBACtCC,MAAK,SAAAC,GACN,OAAOA,EAASM,OAAOP,MAAK,SAAAG,GAAI,OAAIA,SCpElCK,G,wBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRC,gBAAkB,WAChB,EAAKC,UAAS,SAACC,GAAD,MAAY,CAAEC,eAAgBD,EAAMC,cAAeC,SAAU,GAAIC,SAAU,QArBxE,EAwBnBC,cAAgB,WAAO,IAAD,EACW,EAAKJ,MAA5BE,EADY,EACZA,SAAUC,EADE,EACFA,SAClB,EAAKN,MAAMQ,WAAWH,EAAUC,GAChC,EAAKJ,SAAS,CAAEG,SAAU,GAAIC,SAAU,MA3BvB,EA8BnBG,SAAW,WACT,EAAKP,SAAS,CACZE,eAAe,EACfC,SAAU,GACVC,SAAU,GACVI,oBAAoB,IAEtB,EAAKV,MAAMW,eArCM,EAwCnBC,iBAAmB,SAACC,GAClB,EAAKX,SAAS,CAAEG,SAAUQ,EAAEC,OAAOC,SAzClB,EA4CnBC,iBAAmB,SAACH,GAClB,EAAKX,SAAS,CAAEI,SAAUO,EAAEC,OAAOC,SA7ClB,EAgDnBE,iBAAmB,WACjB,EAAKf,UAAS,SAACC,GAAD,MAAY,CAAEO,oBAAqBP,EAAMO,wBAjDtC,EAoDnBQ,iBAAmB,WACjB,OACE,yBAAKC,UAAU,kBACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,4BAEA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,sBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,QAGA,kBAACC,EAAA,EAAD,CAAKD,GAAG,KACN,kBAACP,EAAA,EAAKS,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAI1C,kBAACX,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,yBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,eAGA,kBAACC,EAAA,EAAD,CAAKD,GAAG,KACN,kBAACP,EAAA,EAAKS,QAAN,CAAcP,GAAG,WAAWU,KAAK,QAIrC,kBAACZ,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,sBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,SAGA,kBAACC,EAAA,EAAD,CAAKD,GAAG,KACN,kBAACP,EAAA,EAAKS,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAI1C,kBAACX,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,sBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,aAGA,kBAACC,EAAA,EAAD,CAAKD,GAAG,KACN,kBAACP,EAAA,EAAKS,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAI1C,kBAACX,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,sBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,UAGA,kBAACC,EAAA,EAAD,CAAKD,GAAG,KACN,kBAACP,EAAA,EAAKa,MAAN,CAAYH,KAAK,WAAWI,MAAM,gBAItC,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,aAAWC,MAAO,CAAEC,OAAQ,KAA/D,QAGA,kBAACJ,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,EAAKtB,iBAAkBuB,MAAO,CAAEC,OAAQ,KAA3E,cA3GS,EAoHnBC,YAAc,WACZ,OACE,yBAAKvB,UAAU,aACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,4BACA,kBAACsB,EAAA,EAAD,CAAWL,QAAQ,QAAQE,MAAO,CAAEI,QAAS,KAC3C,kBAACtB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYG,UAAU,qBACpB,kBAACJ,EAAA,EAAKS,QAAN,CAAcE,YAAY,WAAWlB,MAAO,EAAKZ,MAAME,SAAUwC,SAAU,EAAKjC,oBAElF,kBAACU,EAAA,EAAKC,MAAN,CAAYG,UAAU,qBACpB,kBAACJ,EAAA,EAAKS,QAAN,CAAcC,KAAK,WAAWC,YAAY,WAAWlB,MAAO,EAAKZ,MAAMG,SAAUuC,SAAU,EAAK7B,oBAGhG,EAAKhB,MAAML,OAAS,uBAAGmD,GAAG,gBAAgB,EAAK9C,MAAML,OAEvD,kBAAC0C,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,EAAKhC,cAAeiC,MAAO,CAAEC,OAAQ,KAAxE,SAGA,kBAACJ,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,EAAKtC,gBAAiBuC,MAAO,CAAEC,OAAQ,KAA1E,cAvIO,EAiJnBM,mBAAqB,WACnB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAOC,YAAU,GACf,+BACE,4BACE,iCACA,oCACA,qCACA,yCACC,EAAKjD,MAAMJ,OAAS,oCACpB,EAAKI,MAAMJ,OAAS,wCAGzB,+BAEI,EAAKI,MAAMkD,aAAaC,KAAI,SAACC,EAASC,GACpC,OACE,4BACE,4BAAKA,EAAQ,GACb,4BAAKD,EAAQE,MACb,0CACA,0CACC,EAAKtD,MAAMJ,OAAS,0CACpB,EAAKI,MAAMJ,OAAS,kDAzKpB,EAoLnB2D,kBAAoB,WAClB,IAAIC,EACAC,EAyCJ,OAxCK,EAAKtD,MAAMC,eAAkB,EAAKD,MAAMO,qBAEzC8C,EADuB,OAArB,EAAKxD,MAAMJ,MAEX,kBAACyC,EAAA,EAAD,CAAQS,GAAG,WAAWR,QAAQ,UAAUC,QAAS,EAAKtC,iBAAtD,eAMA,kBAACoC,EAAA,EAAD,CAAQS,GAAG,WAAWR,QAAQ,SAASC,QAAS,EAAK9B,UAArD,WAOD,EAAKN,MAAMO,oBAA2C,OAArB,EAAKV,MAAMJ,QAC/C6D,EACE,kBAACpB,EAAA,EAAD,CAAQS,GAAG,YAAYR,QAAQ,UAAUC,QAAS,EAAKtB,kBAAvD,gBAuBF,6BACGwC,EACAD,IAlOY,EAuOnBE,cAAgB,WACd,OACE,yBAAKvC,UAAU,WACb,4CAxOJ,EAAKhB,MAAQ,CACXC,eAAe,EACfC,SAAU,GACVC,SAAU,GACVI,oBAAoB,GANL,E,iFAWjBiD,KAAK3D,MAAM4D,oB,yCAGMC,EAAWC,GACH,OAArBH,KAAK3D,MAAMJ,OAAkB+D,KAAK3D,MAAMJ,QAAUiE,EAAUjE,OAC9D+D,KAAKzD,SAAS,CAAEE,eAAe,M,+BAgOjC,OACE,yBAAKe,UAAU,MAAM4C,OAAO,MAC1B,yBAAK5C,UAAU,UACb,iDAEF,yBAAKA,UAAU,WAEXwC,KAAKJ,oBAGLI,KAAKxD,MAAMC,eAAiBuD,KAAKjB,cAGjCiB,KAAKxD,MAAMO,oBAAsBiD,KAAKzC,oBAGpCyC,KAAKxD,MAAMC,gBAAkBuD,KAAKxD,MAAMO,oBAAuBiD,KAAKZ,sBAIxEY,KAAK3D,MAAMgE,SAAWL,KAAKD,qB,GArQnBO,cAmRZC,EAAsB,CAC1B1D,WDpRwB,eAACH,EAAD,uDAAY,GAAIC,EAAhB,uDAA2B,GAA3B,8CAAkC,WAAO6D,GAAP,qBAAAC,EAAA,6DAC1DD,EAAS,CAAEnC,KAAM,kBACXtC,EAAO2E,KAAKC,UAAU,CAC1BjE,WACAC,aAJwD,SAMxCtB,EAAaU,GAN2B,OAMpD6E,EANoD,OAOpD5E,EAAQ4E,EAAI5E,MAAQ4E,EAAI5E,MAAQ,GAChCC,EAAQ2E,EAAI3E,MAAQ2E,EAAI3E,MAAQ,GAEpCuE,EADY,KAAVvE,EACO,CACPoC,KAAM,gBACNpC,SAGO,CACPoC,KAAM,gBACNrC,UAjBsD,2CAAlC,uDCqRxBgB,YD1OyB,kBAAM,SAACwD,GAChCA,EAAS,CAAEnC,KAAM,kBC0OjB4B,gBDnO6B,yDAAM,WAAOO,EAAUK,GAAjB,eAAAJ,EAAA,6DACnCD,EAAS,CAAEnC,KAAM,yBADkB,SAEhBnC,IAFgB,OAE7BH,EAF6B,OAGnCyE,EAAS,CACPnC,KAAM,uBACNyC,KAAM/E,IAL2B,2CAAN,0DCsOhBgF,eAbS,SAACvE,EAAOwE,GAAR,MAAsB,CAC5CX,QAAS7D,EAAM6D,QACfd,aAAc/C,EAAMyE,SACpBjF,MAAOQ,EAAMR,MACbC,MAAOO,EAAMP,SAWbsE,EAFaQ,CAGb3E,GCvRkB8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qkBClBN,IAAMC,EAAe,CACnBlB,SAAS,EACTY,SAAU,GACVjF,MAAO,KACPC,MAAO,MAmDMuF,EAhDE,WAAmC,IAAlChF,EAAiC,uDAAzB+E,EAAcE,EAAW,uCACjD,OAAQA,EAAOpD,MACb,IAAK,gBACH,OAAO,EAAP,GACK7B,EADL,CAEE6D,SAAS,EACTrE,MAAOuF,EAAavF,MACpBC,MAAOsF,EAAatF,QAExB,IAAK,gBACH,OAAO,EAAP,GACKO,EADL,CAEE6D,SAAS,EACTpE,MAAOwF,EAAOxF,MACdD,MAAOuF,EAAavF,QAExB,IAAK,gBACH,OAAO,EAAP,GACKQ,EADL,CAEE6D,SAAS,EACTpE,MAAOsF,EAAatF,MACpBD,MAAOyF,EAAOzF,QAElB,IAAK,cACH,OAAO,EAAP,GACKQ,EADL,CAEE6D,QAASkB,EAAalB,QACtBpE,MAAOsF,EAAatF,MACpBD,MAAOyF,EAAOzF,QAGlB,IAAK,uBACH,OAAO,EAAP,GACKQ,EADL,CAEEkF,QAAQ,IAEZ,IAAK,uBACH,OAAO,EAAP,GACKlF,EADL,CAEE6D,SAAS,EACTY,SAAUQ,EAAOX,OAGrB,QACE,OAAOtE,ICzCPmF,EAAQC,YAAYJ,EAAUK,YAAgBC,MAE9CC,EACJ,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAIJK,IAASC,OAAOF,EAAMG,SAASC,eAAe,SF+GxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1G,MAAK,SAAA2G,GACjCA,EAAaC,kB","file":"static/js/main.3516a230.chunk.js","sourcesContent":["\n/**\n * Action for login admin\n * \n * @param {string} username \n * @param {string} password \n */\nexport const adminLogin = (username = '', password = '') => async (dispatch) => {\n  dispatch({ type: 'LOGIN_REQUEST' })\n  const data = JSON.stringify({\n    username,\n    password\n  })\n  const res = await postLoginAPI(data)\n  const error = res.error ? res.error : ''\n  const token = res.token ? res.token : ''\n  if (token !== '') {\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      token\n    })\n  } else {\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      error\n    })\n  }\n}\n/**\n * Call API login\n * @param {json} body \n */\nconst postLoginAPI = (body) => {\n  return fetch('https://cors-anywhere.herokuapp.com/' + 'https://nodejs-api-example.herokuapp.com/login', {\n    credentials: 'same-origin',\n    method: 'POST',\n    body,\n    headers: new Headers({ 'Content-Type': 'application/json' })\n  }).then(response => {\n    return response.text().then((data) => {\n      if (data === 'Wrong username and password') {\n        return { error: data }\n      }\n      return { token: data }\n    })\n  })\n}\n/**\n * Action for admin logout\n */\nexport const adminLogout = () => (dispatch) => {\n  dispatch({ type: 'LOGIN_CLEAR' })\n}\n\n\n/**\n * Action for get all products list\n */\nexport const getProductsList = () => async (dispatch, getState) => {\n  dispatch({ type: 'GET_PRODUCTS_REQUEST' })\n  const data = await getProductsAPI()\n  dispatch({\n    type: 'GET_PRODUCTS_SUCCESS',\n    list: data\n  })\n}\n/**\n * Call API get products list\n */\nconst getProductsAPI = () => {\n  return fetch('https://cors-anywhere.herokuapp.com/' + 'https://nodejs-api-example.herokuapp.com/products', {\n    credentials: 'same-origin',\n    method: 'GET',\n    headers: new Headers({ 'Content-Type': 'application/json' })\n  }).then(response => {\n    return response.json().then(data => data)\n  })\n}","import React, { Component } from 'react';\nimport { Button, Table, Form, Col, Row, Card, ListGroup } from 'react-bootstrap';\nimport { connect } from 'react-redux'\nimport { adminLogin, adminLogout, getProductsList } from './actionCreators'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showLoginForm: false,\n      username: '',\n      password: '',\n      showNewProductForm: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getProductsList()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.token !== null && this.props.token !== prevProps.token) {\n      this.setState({ showLoginForm: false })\n    }\n  }\n\n  onShowLoginForm = () => {\n    this.setState((state) => ({ showLoginForm: !state.showLoginForm, username: '', password: '' }))\n  }\n\n  onSubmitLogin = () => {\n    const { username, password } = this.state\n    this.props.adminLogin(username, password)\n    this.setState({ username: '', password: '' })\n  }\n\n  onLogout = () => {\n    this.setState({\n      showLoginForm: false,\n      username: '',\n      password: '',\n      showNewProductForm: false,\n    })\n    this.props.adminLogout()\n  }\n\n  onChangeUsername = (e) => {\n    this.setState({ username: e.target.value })\n  }\n\n  onChangePassword = (e) => {\n    this.setState({ password: e.target.value })\n  }\n\n  onShowNewProduct = () => {\n    this.setState((state) => ({ showNewProductForm: !state.showNewProductForm }))\n  }\n\n  renderNewProduct = () => {\n    return (\n      <div className=\"NewProductForm\">\n        <Card>\n          <Card.Header>Administrator Login</Card.Header>\n\n          <Form>\n            <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n              <Form.Label column sm=\"3\">\n                Name\n              </Form.Label>\n              <Col sm=\"9\">\n                <Form.Control type=\"text\" placeholder=\"\" />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} controlId=\"formPlaintextPassword\">\n              <Form.Label column sm=\"3\">\n                Description\n              </Form.Label>\n              <Col sm=\"9\">\n                <Form.Control as=\"textarea\" rows=\"3\" />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n              <Form.Label column sm=\"3\">\n                Price\n              </Form.Label>\n              <Col sm=\"9\">\n                <Form.Control type=\"text\" placeholder=\"\" />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n              <Form.Label column sm=\"3\">\n                Image url\n              </Form.Label>\n              <Col sm=\"9\">\n                <Form.Control type=\"text\" placeholder=\"\" />\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n              <Form.Label column sm=\"3\">\n                Status\n              </Form.Label>\n              <Col sm=\"9\">\n                <Form.Check type=\"checkbox\" label=\"Available\" />\n              </Col>\n            </Form.Group>\n\n            <Button variant=\"success\" onClick={() => { }} style={{ margin: 20 }}>\n              Save\n            </Button>\n            <Button variant=\"primary\" onClick={this.onShowNewProduct} style={{ margin: 20 }}>\n              Cancel\n            </Button>\n          </Form>\n        </Card>\n      </div>\n    )\n  }\n\n  renderLogin = () => {\n    return (\n      <div className=\"LoginForm\">\n        <Card>\n          <Card.Header>Administrator Login</Card.Header>\n          <ListGroup variant=\"flush\" style={{ padding: 10 }}>\n            <Form>\n              <Form.Group controlId=\"formBasicUsername\">\n                <Form.Control placeholder=\"Username\" value={this.state.username} onChange={this.onChangeUsername} />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Control type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={this.onChangePassword} />\n              </Form.Group>\n              {\n                this.props.error && <p id=\"errorMessage\">{this.props.error}</p>\n              }\n              <Button variant=\"success\" onClick={this.onSubmitLogin} style={{ margin: 20 }}>\n                Login\n              </Button>\n              <Button variant=\"primary\" onClick={this.onShowLoginForm} style={{ margin: 20 }}>\n                Close\n              </Button>\n            </Form>\n          </ListGroup>\n        </Card>\n      </div>\n    )\n  }\n\n  renderProductsList = () => {\n    return (\n      <div>\n        <Table responsive>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Price</th>\n              <th>Available</th>\n              {this.props.token && <th>Edit</th>}\n              {this.props.token && <th>Delete</th>}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.props.productsList.map((product, index) => {\n                return (\n                  <tr>\n                    <td>{index + 1}</td>\n                    <td>{product.name}</td>\n                    <td>Table cell</td>\n                    <td>Table cell</td>\n                    {this.props.token && <td>Table cell</td>}\n                    {this.props.token && <td>Table cell</td>}\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </Table>\n      </div>\n    )\n  }\n\n  renderAdminButton = () => {\n    let AuthButton\n    let NewProductButton\n    if (!this.state.showLoginForm && !this.state.showNewProductForm) {\n      if (this.props.token === null) {\n        AuthButton = (\n          <Button id=\"loginBtn\" variant=\"primary\" onClick={this.onShowLoginForm}>\n            Admin Login\n          </Button>\n        )\n      } else {\n        AuthButton = (\n          <Button id=\"loginBtn\" variant=\"danger\" onClick={this.onLogout}>\n            Logout\n          </Button>\n        )\n      }\n    }\n\n    if (!this.state.showNewProductForm && this.props.token !== null) {\n      NewProductButton = (\n        <Button id=\"createBtn\" variant=\"success\" onClick={this.onShowNewProduct}>\n          New Product\n        </Button>\n      )\n    }\n\n\n    // if (this.props.token !== null) {\n    //   if (this.state.showNewProductForm) {\n    //     NewProductButton = (\n    //       <Button id=\"createBtn\" variant=\"primary\" onClick={this.onShowNewProduct}>\n    //         Close\n    //       </Button>\n    //     )\n    //   } else {\n    //     NewProductButton = (\n    //       <Button id=\"createBtn\" variant=\"success\" onClick={this.onShowNewProduct}>\n    //         New Product\n    //       </Button>\n    //     )\n    //   }\n    // }\n    return (\n      <div>\n        {NewProductButton}\n        {AuthButton}\n      </div>\n    )\n  }\n\n  renderLoading = () => {\n    return (\n      <div className=\"Loading\">\n        <h2>Loading...</h2>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\" scroll=\"no\">\n        <div className=\"Header\">\n          <h1>Simple eCommerce</h1>\n        </div>\n        <div className=\"Content\">\n          {\n            this.renderAdminButton()\n          }\n          {\n            this.state.showLoginForm && this.renderLogin()\n          }\n          {\n            this.state.showNewProductForm && this.renderNewProduct()\n          }\n          {\n            (!this.state.showLoginForm && !this.state.showNewProductForm) && this.renderProductsList()\n          }\n        </div>\n        {\n          this.props.loading && this.renderLoading()\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  loading: state.loading,\n  productsList: state.products,\n  error: state.error,\n  token: state.token,\n})\n\nconst mapDispatchToProps = ({\n  adminLogin,\n  adminLogout,\n  getProductsList,\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  loading: false,\n  products: [],\n  error: null,\n  token: null,\n}\n\nconst reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOGIN_REQUEST':\n      return {\n        ...state,\n        loading: true,\n        error: initialState.error,\n        token: initialState.token\n      }\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        token: action.token,\n        error: initialState.error\n      }\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        token: initialState.token,\n        error: action.error\n      }\n    case 'LOGIN_CLEAR':\n      return {\n        ...state,\n        loading: initialState.loading,\n        token: initialState.token,\n        error: action.error\n      }\n\n    case 'GET_PRODUCTS_REQUEST':\n      return {\n        ...state,\n        loadin: true,\n      }\n    case 'GET_PRODUCTS_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        products: action.list,\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default reducers\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './reducers'\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nconst Root = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(Root, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}